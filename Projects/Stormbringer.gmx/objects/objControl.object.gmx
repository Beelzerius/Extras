<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializa o objeto Control

global.bolPause = 1; // Pausa o jogo
global.fontGlobal = font_add_sprite_ext(sprFont01, " ABCDEFGHIJKLMNOPQRSTUVWXYZ:\/0123456789", true, 1);

intGauge01 = 80;    // Distancia do marcador
intHealthNow = 0;   // Proporção vida
intStaminaNow = 0;  // Proporção vida
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cria a proporção de vida e stamina
intHealthNow = round((objPlayer.intHealth * intGauge01) / objPlayer.intHealthMax);
intStaminaNow = round((objPlayer.intStamina * intGauge01) / objPlayer.intStaminaMax);


// Teste de vida
if(keyboard_check_pressed(ord('Q')))
{
    objPlayer.intHealthMax -= 4;
    objPlayer.intHealth = objPlayer.intHealthMax;
}
if(keyboard_check_pressed(ord('E')))
{
    objPlayer.intHealthMax +=4;
    objPlayer.intHealth = objPlayer.intHealthMax;
}
if(keyboard_check_pressed(ord('A')))
{
    objPlayer.intHealth -= 1;
}
if(keyboard_check_pressed(ord('D')))
{
    objPlayer.intHealth += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio do jogo
switch(room)
{
    case roomInicio:
    if (!instance_exists(objPlayer))
    {
        instance_create(304, 207, objPlayer);
        view_object[0] = objPlayer;
        view_hborder[0] = view_wview[0]/2;
        view_vborder[0] = view_hview[0]/2;
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Desenho da GUI

// Variaveis
var intViewX, intViewY, intMargin, intDrawT, intDrawB, intDrawL, intDrawR, bolDone, colHealth, colDanger;

intViewX = view_xview[0];
intViewY = view_yview[0];
intMargin = 4;
intDrawT = intViewY + intMargin;
intDrawB = intViewY + view_hview[0] - intMargin;
intDrawL = intViewX + intMargin;
intDrawR = intViewX + view_wview[0] - intMargin;

bolDone = false;

colHealth = make_colour_rgb(255, 255, 255);
colDanger = make_colour_rgb(214, 110, 72);

// Desenho da vida e stamina
if(instance_exists(objPlayer) and (global.bolPause != 0))
{
    // Barra proporcional de vida
    draw_set_colour(c_black);
    draw_rectangle(intDrawL + 3, intDrawT + 4 ,intDrawL + 4 + intGauge01, intDrawT + 10, false);
    draw_sprite_stretched(sprGaugeBar, 0, intDrawL + 4, intDrawT + 5, intHealthNow, 5);

    // Indicador digital de vida
    draw_set_font(global.fontGlobal);
    if (objPlayer.intHealth &lt;= floor(objPlayer.intHealthMax * 0.25))
    {
        draw_set_colour(colDanger);
    }
    else draw_set_colour(colHealth);
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text(intDrawL + intGauge01 + 3, intDrawT + 11, string(objPlayer.intHealth) + "/" + string(objPlayer.intHealthMax));
    
    // Barra proporcional de Stamina
    draw_set_colour(c_black);
    draw_rectangle(intDrawL + 3, intDrawT + 12 ,intDrawL + 4 + intGauge01, intDrawT + 18, false);
    draw_sprite_stretched(sprGaugeBar, 1, intDrawL + 4, intDrawT + 13, intStaminaNow, 5);
    
    // Indicador digital e stamina
    draw_set_font(global.fontGlobal);
    if (objPlayer.intStamina &lt;= floor(objPlayer.intStaminaMax * 0.25))
    {
        draw_set_colour(colDanger);
    }
    else draw_set_colour(colHealth);
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_text(intDrawL + intGauge01 + 3, intDrawT + 8, string(objPlayer.intStamina) + "/" + string(objPlayer.intStaminaMax));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
