<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdleD</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerIdleD</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializa o objeto Player

// Variaveis
intImageSpeed = PLAYER_IMAGE_SPEED;

// Movimento
intM = 1 * global.bolPause;
intMoveH = 0;           // Fator de movimento horizontal
intMoveV = 0;           // Fator de movimento vertical
intWalk = 2 * intM;     // Velocidade andando
intRun = intWalk * 1.5; // Velocidade correndo
intSlow = intWalk * 0.5;// Velocidade esgueirando
intAcc = 1.0 * intM;    // Aceleração
intFric = 1.9 * intM;   // Fricção

// Orientação
intFaceX = 0;
intFaceY = 0;
strFacing = "south";

// Velocidade
intVX = 0;
intVY = 0;

// Atributos
intHealthMax = 12;
intHealth = intHealthMax;

intStaminaMax = 5;
intStamina = intStaminaMax;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Maquina de estados

enum statePlayer
    {
    idle = scrPlayerIdle,
    walk = scrPlayerWalk
    }

staPlayer = statePlayer.idle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deslocamento

// Botões
var keyUp, keyDown, keyRight, keyLeft, keyRun, keySlow;

keyUp = -keyboard_check(vk_up);
keyDown = keyboard_check(vk_down);
keyLeft = -keyboard_check(vk_left);
keyRight = keyboard_check(vk_right);

keyRun = keyboard_check(ord('Z'));
keySlow = keyboard_check(ord('X'));

// Velocidade e movimento
if (keyRun) intSpeed = intRun;          // Correndo
else if (keySlow) intSpeed = intSlow;   // Esgueirando
else intSpeed = intWalk;                // Andando

// Movimento
intMoveH = (keyLeft + keyRight) * global.bolPause;
intMoveV = (keyUp + keyDown) * global.bolPause;

// Orientação
if (global.bolPause != 0)
{
    if(intMoveH &gt; 0)
    {
        strFacing = "east";
        intFacex = 1;
        intFaceY = 0;
    }
    else if(intMoveH &lt; 0)
    {
        strFacing = "west";
        intFacex = -1;
        intFaceY = 0;
    }
    
    if(intMoveV &gt; 0)
    {
        strFacing = "south";
        intFacex = 0;
        intFaceY = 1;
    }
    else if(intMoveV &lt; 0)
    {
        strFacing = "north";
        intFacex = 0;
        intFaceY = -1;
    }
}

// Deslocamento horizontal
if(intMoveH != 0) intVX = scrApproach(intVX, intSpeed * intMoveH, intAcc);
else intVX = scrApproach(intVX, intSpeed * intMoveH, intFric);

// Deslocamento vertical
if(intMoveV != 0) intVY = scrApproach(intVY, intSpeed * intMoveV, intAcc);
else intVY = scrApproach(intVY, intSpeed * intMoveV, intFric);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisões

// Colisão horizontal
repeat(abs(intVX))
{
    // Colisão com o bloco de colisão
    if (place_meeting(x + sign(intVX), y, objBlock))
    {
        intVX = 0;
        break;
    }
    // Colisão com entidades
    else if (place_meeting(x + sign(intVX), y, objFatherEntity))
    {
        var insNPC = instance_place(x + sign(intVX), y, objFatherEntity);
        if (insNPC.bolSolid == true){ intVX = 0;break;}
        else x += sign(intVX);
        //break;
    }
    else x += sign(intVX);
}

// Colisão vertical
repeat(abs(intVY))
{
    // Colisão com o bloco de colisão
    if (place_meeting(x, y + sign(intVY), objBlock))
    {
        intVY = 0;
        break;
    }
    // Colisão com entidades
    else if (place_meeting(x, y + sign(intVY), objFatherEntity))
    {
        var insNPC = instance_place(x, y + sign(intVY), objFatherEntity);
        if (insNPC.bolSolid == true){ intVY = 0;break;}
        else y += sign(intVY);
        //break;
    }
    else y += sign(intVY);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animação

if(global.bolPause == 0) image_speed = 0;
else image_speed = intImageSpeed;

if(intMoveH == 0) and (intMoveV == 0)
{
    staPlayer = statePlayer.idle;
}
else staPlayer = statePlayer.walk;

script_execute(staPlayer);

depth = room_height - y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
