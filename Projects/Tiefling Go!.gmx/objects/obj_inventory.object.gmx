<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the inventory object
text_border = 22;
color = c_black;
empty = false;
empty_message = "You've no items."

item_selected = 0;
scroll_amount = 0;
inventory_end_at = min(ds_grid_height(obj_player_stats.player_inventory),floor((sprite_get_height(spr_inventory) - (text_border * 3))/32 ));

inventory_on_screen = 0;
if(ds_grid_get(obj_player_stats.player_inventory, I_NAME, 0) == 0 )
{
    inventory_end_at = 0;
    empty = true;
}
show_debug_message(string(inventory_end_at));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the inventory on screen
draw_sprite(spr_inventory, 0, x, y);
draw_set_colour(color);

//Calc the bord
b_left = bbox_left - sprite_get_width(spr_inventory)/2;
b_top = bbox_top - sprite_get_height(spr_inventory)/2;

draw_text(b_left + text_border, b_top + text_border, "Image");
draw_text(b_left + 125, b_top + text_border, "Name");
draw_text(b_left + 225, b_top + text_border, "Amount");

var left_start = b_left + 120;
var top_start = b_top + 48;

for(var i = 0; i &lt; inventory_end_at; ++i)
{
    for(var g = 0; g &lt; ds_grid_width(obj_player_stats.player_inventory); ++g)
    {
        if(g == I_NAME)
            draw_text(left_start, top_start + (i * 32),ds_grid_get(obj_player_stats.player_inventory, I_NAME, i));
        if(g == I_AMOUNT)
            draw_text(left_start + 140, top_start + (i * 32),ds_grid_get(obj_player_stats.player_inventory, I_AMOUNT, i));
        if(g == I_SPRITE)
            var sprite, xx, yy;
            sprite = ds_grid_get(obj_player_stats.player_inventory, I_SPRITE, i);
            xx = sprite_get_xoffset(sprite);
            yy = sprite_get_yoffset(sprite);
            sprite_set_offset(sprite, 12, 12);
            draw_sprite_ext(sprite, 0, b_left + 40, top_start + (i * 32) + 12, 1.5, 1.5, image_angle, image_blend, image_alpha);
            //draw_sprite(sprite, 0, b_left + 40, top_start + (i * 32) + 12);
            sprite_set_offset(sprite, xx, yy);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
